{
  "stats": {
    "suites": 1,
    "tests": 3,
    "passes": 3,
    "pending": 0,
    "failures": 0,
    "start": "2020-08-06T04:26:04.107Z",
    "end": "2020-08-06T04:26:05.318Z",
    "duration": 1211,
    "testsRegistered": 3,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false,
    "passPercentClass": "success",
    "pendingPercentClass": "danger"
  },
  "suites": {
    "uuid": "7fbf42fb-9d5f-4721-a83b-bdef20499846",
    "title": "",
    "fullFile": "",
    "file": "",
    "beforeHooks": [],
    "afterHooks": [],
    "tests": [],
    "suites": [
      {
        "uuid": "b0971574-b446-45d9-971c-b17be3a0f6a7",
        "title": "OMDB Movie List",
        "fullFile": "/Users/mac/Documents/Backup/Project/javascript-automation/APItest-mocha-chai/api/test/movie-list-test.js",
        "file": "/api/test/movie-list-test.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "@get As a User, I want to be able to get OMDB Movie list",
            "fullTitle": "OMDB Movie List @get As a User, I want to be able to get OMDB Movie list",
            "timedOut": false,
            "duration": 452,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const response = await page.getMovieList(apiKey, keySearch);\nassert(response.status).to.equal(200);",
            "err": {},
            "isRoot": false,
            "uuid": "a0c92138-71c0-4a8d-a9d5-9f2339a410c4",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "@get As a User, I should got error message when I send request without key of search",
            "fullTitle": "OMDB Movie List @get As a User, I should got error message when I send request without key of search",
            "timedOut": false,
            "duration": 133,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const response = await page.getMovieList(apiKey, '');\nassert(response.status).to.equal(200, response.body.Error);\nassert(response.body.Response).to.equal('False');\nassert(response.body.Error).to.equal('Something went wrong.');",
            "err": {},
            "isRoot": false,
            "uuid": "346b4513-cbbd-4d26-970b-c618d74bd1da",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "@get As a User, I should got error 401 when I send request with invalid API Key",
            "fullTitle": "OMDB Movie List @get As a User, I should got error 401 when I send request with invalid API Key",
            "timedOut": false,
            "duration": 611,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const response = await page.getMovieList(invalidApiKey, keySearch);\nassert(response.status).to.equal(401, response.body.Error);\nassert(response.body.Response).to.equal('False');\nassert(response.body.Error).to.equal('Invalid API key!');",
            "err": {},
            "isRoot": false,
            "uuid": "9afcdc8f-1277-4bc3-9c8f-34e9258214f7",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "a0c92138-71c0-4a8d-a9d5-9f2339a410c4",
          "346b4513-cbbd-4d26-970b-c618d74bd1da",
          "9afcdc8f-1277-4bc3-9c8f-34e9258214f7"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 1196,
        "root": false,
        "rootEmpty": false,
        "_timeout": 180000
      }
    ],
    "passes": [],
    "failures": [],
    "pending": [],
    "skipped": [],
    "duration": 0,
    "root": true,
    "rootEmpty": true,
    "_timeout": 180000
  },
  "copyrightYear": 2020
}